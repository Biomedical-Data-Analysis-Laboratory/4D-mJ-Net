{
  "EXPERIMENT": 10, %% # of experiment
  "root_path": "/home/stud/lucat/PhD_Project/Stroke_segmentation/", %% main path
  "dataset_path": "/local/home/lucat/DATASET/ISLES2018/", % dataset path
   %% list of patients to test (if == ["ALL"] test all of them)
  "PATIENT_TO_TEST": ["ALL"],
  "OVERRIDE_MODELS_ID_PATH": "", %% path for overriding the model ID
  "init": { %% basic flag for init the process
    "NUMBER_OF_IMAGE_PER_SECTION": 64, %% change the number of image per section (optional)
    "TF_CPP_MIN_LOG_LEVEL": "3",
    "per_process_gpu_memory_fraction": 0.5,
    "allow_growth": 1,
    "MULTIPROCESSING": 0
  },
  %% paths containing the various important folders: save, labeled_images, ...
  "relative_paths": {
    "labeled_images": "PATIENTS/ISLES2018/NEW_TRAINING/Ground Truth/",
    "patients": "PATIENTS/ISLES2018/NEW_TRAINING/FINAL/",
    "save": {
      "model": "MODELS/",
      "partial_model": "TMP_MODELS/",
      "plot": "PLOTS/",
      "images": "IMAGES/",
      "text": "TEXT/",
      "intermediate_activation": "TMP/" %% (optional) folder for the intermediate activation images
    }
  },
  %% definition of the model(s)
  "models": [
     {
      "name": "mJNet_v2", %% name of nn, same as the name function
      "loss": "mod_dice_coef_loss", %% loss name function
      "metrics": ["mod_dice_coef", "dice_coef"], %% list of metric name functions
      "epochs": 50, %% # of epochs
      "batch_size":8, %% set batch size (optional, default=32)
      "classes_to_evaluate": ["penumbra", "core", "penumbracore"], %% list of class to evaluate
      %% list of statistic to perform at the end
      "statistics": ["sensitivity", "specificity", "precision", "f1", "accuracy", "jaccard_index"],
      %% validation variable
      "val":{
        "validation_perc": 5, %% percentage
        "number_patients_for_validation": 5, % number of patients for the validation set
        "number_patients_for_testing": 4, % number of patients for the test set
        "random_validation_selection": 0 % flag for random selection in the validation dataset
      },
      "test_steps":1, %% # of test steps
      %% optimizer info (different for each of them (ADAM, SGD, ...))
      "optimizer": {
        "name": "SGD",
        "learning_rate": 0.01,
        "decay": 1e-6,
        "momentum":0.9,
        "nesterov":"True"
      },
      %% choseable parameters for the nn
      "params":{
        "dropout":{ %% dropout value for layers
          "0.1":0.25,
          "1":0.25,
          "2":0.25,
          "3":0.25,
          "3.1":0.5,
          "3.2":0.5,
          "3.3":0.5,
          "3.4":0.5,
          "4":0.3,
          "5":0.3
        },
        "max_pool":{ %% max pooling values for the longJ layers
          "long.1":3,
          "long.2":2,
          "long.3":5
        }
      },
      %% list of callbacks with choseable parameters
      "callbacks":{
        "ModelCheckpoint": { %% save the model
          "monitor": "mod_dice_coef",
          "mode": "max",
          "period": 1
        },
        "EarlyStopping": { %% stop the training based on parameters
          "monitor": "loss",
          "min_delta": 0.001,
          "patience": 12
        },
        "ReduceLROnPlateau": { %% reduce learning rate
          "monitor": "val_loss",
          "factor": 0.1,
          "patience": 2,
          "min_delta": 1e-4,
          "cooldown": 1,
          "min_lr": 0
        },
        "CollectBatchStats": { %% save stats
          "acc":"mod_dice_coef"
        }
      },
      %% important flags (1=yes, 0=no)
      "to_categ":0, %% select categorical output in the nn (softmax activation)
      "save_images": 1, %% save the images
      "save_statistics":0, %% save statistics (time consuming)
      "use_background_in_statistics":0, %% use the background class during statistic analysis
      "calculate_ROC":0, %% calculate ROC
      "data_augmentation": 1, %% use data augmention dataset
      "cross_validation": 0, %% use cross validation during training (save various models)
      "train_again": 0, %% train again even if the model is already saved
      "supervised": 1 %% supervised learning?
    }
  ]
}
